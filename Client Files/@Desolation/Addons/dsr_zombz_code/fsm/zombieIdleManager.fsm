/*%FSM<COMPILE "F:\SteamLibrary\steamapps\common\Arma 3 Tools\FSMEditor\scriptedFSM.cfg, ZombieIdleManager">*/
/*%FSM<HEAD>*/
/*
item0[] = {"Init",0,250,1125.000000,850.000000,1225.000000,900.000000,0.000000,"Init"};
item1[] = {"Client",4,218,1125.000000,1075.000000,1225.000000,1125.000000,0.000000,"Client"};
item2[] = {"Not_Client",4,218,1250.000000,1000.000000,1350.000000,1050.000000,0.000000,"Not-Client"};
item3[] = {"Calculate_All_Zo",2,4346,1125.000000,1150.000000,1225.000000,1200.000000,0.000000,"Calculate" \n "All" \n "Zombies"};
item4[] = {"End",1,250,1250.000000,1075.000000,1350.000000,1125.000000,0.000000,"End"};
item5[] = {"Timeout",4,218,1125.000000,1225.000000,1225.000000,1275.000000,0.000000,"Timeout"};
item6[] = {"end_FSM",4,218,1250.000000,1150.000000,1350.000000,1200.000000,0.000000,"end FSM"};
item7[] = {"Who_Are_You_",3,250,1125.000000,1000.000000,1225.000000,1050.000000,0.000000,"Who" \n "Are" \n "You?"};
item8[] = {"Wait_10_Seconds",4,218,1125.000000,925.000000,1225.000000,975.000000,0.000000,"Wait" \n "10" \n "Seconds"};
item9[] = {"players_check",4,218,1000.000000,1150.000000,1100.000000,1200.000000,0.000000,"players check"};
link0[] = {0,8};
link1[] = {1,3};
link2[] = {2,4};
link3[] = {3,5};
link4[] = {3,6};
link5[] = {3,9};
link6[] = {5,3};
link7[] = {6,4};
link8[] = {7,1};
link9[] = {7,2};
link10[] = {8,7};
link11[] = {9,3};
globals[] = {0.000000,0,0,0,0,640,480,2,15,6316128,1,897.910889,1327.021973,1340.043457,904.507202,935,949,1};
window[] = {2,-1,-1,-1,-1,1170,172,1322,504,3,953};
*//*%FSM</HEAD>*/
class FSM
{
        fsmName = "ZombieIdleManager";
        class States
        {
                /*%FSM<STATE "Init">*/
                class Init
                {
                        name = "Init";
                        itemno = 0;
                        init = /*%FSM<STATEINIT""">*/"_timeout = diag_ticktime;" \n
                         "_nearbyPlayersCheck = diag_ticktime;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Wait_10_Seconds">*/
                                class Wait_10_Seconds
                                {
                                        itemno = 8;
                                        priority = 0.000000;
                                        to="Who_Are_You_";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"((diag_ticktime - _timeout) >= 10)"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Calculate_All_Zo">*/
                class Calculate_All_Zo
                {
                        name = "Calculate_All_Zo";
                        itemno = 3;
                        init = /*%FSM<STATEINIT""">*/"_timeout = diag_ticktime;" \n
                         """Checking idle zombies"" call SM_fnc_Log;" \n
                         "if !(SM_IdleZombies isEqualTo []) then" \n
                         "{" \n
                         "	_deleted = [];" \n
                         "" \n
                         "	""Calculating idle zombies"" call SM_fnc_Log;" \n
                         "	{" \n
                         "		format [""Calculating zombie with netID %1"",_x] call SM_fnc_Log;" \n
                         "		_zombieAgent = objectFromNetID _x;" \n
                         "		_exit = false;" \n
                         "		if !(isNull _zombieAgent) then" \n
                         "		{" \n
                         "			if ((player distance _zombieAgent) > 1000) exitWith" \n
                         "			{" \n
                         "				["""", netID _zombieAgent] remoteExecCall [""SM_fnc_transferOwnership"", 2];" \n
                         "				_exit = true;" \n
                         "				_deleted pushBack _forEachIndex;" \n
                         "				_zombieAgent setVariable [""SM_LastTargetCheck"",nil];" \n
                         "				_zombieAgent setVariable [""SM_ZombieSoundDelayMoan"",nil];" \n
                         "				_deleted pushback _forEachIndex;" \n
                         "				_firedEVH = _zombieAgent getVariable [""SM_ZombieOnFiredEVH"",-1];" \n
                         "				if !(_firedEVH isEqualTo -1) then" \n
                         "				{" \n
                         "					_zombieAgent removeEventHandler [""FiredNear"",_firedEVH];" \n
                         "					_zombieAgent setVariable [""SM_ZombieOnFiredEVH"",nil];" \n
                         "				};" \n
                         "			};" \n
                         "			if (!(local _zombieAgent) || !(alive _zombieAgent)) then" \n
                         "			{" \n
                         "				_deleted pushBack _forEachIndex;" \n
                         "				_zombieAgent setVariable [""SM_LastTargetCheck"",nil];" \n
                         "				_zombieAgent setVariable [""SM_ZombieSoundDelayMoan"",nil];" \n
                         "				_deleted pushback _forEachIndex;" \n
                         "				_firedEVH = _zombieAgent getVariable [""SM_ZombieOnFiredEVH"",-1];" \n
                         "				if !(_firedEVH isEqualTo -1) then" \n
                         "				{" \n
                         "					_zombieAgent removeEventHandler [""FiredNear"",_firedEVH];" \n
                         "					_zombieAgent setVariable [""SM_ZombieOnFiredEVH"",nil];" \n
                         "				};" \n
                         "				_exit = true;" \n
                         "			};" \n
                         "		}" \n
                         "		else" \n
                         "		{" \n
                         "			_deleted pushback _forEachIndex;" \n
                         "		};" \n
                         "" \n
                         "		if !(_exit) then {" \n
                         "		if ((diag_ticktime - (_zombieAgent getVariable [""SM_ZombieSoundDelayMoan"",0])) >= 420) then" \n
                         "		{" \n
                         "			_moan = selectRandom (getArray (configFile >> ""SM_Zombz"" >> ""SM_MoanArray""));" \n
                         "			[_zombieAgent, _moan] remoteExecCall [""Say3D"", SM_NearbyPlayers];" \n
                         "			_zombieAgent setVariable [""SM_ZombieSoundDelayMoan"", diag_ticktime];" \n
                         "		};" \n
                         "" \n
                         "		_firedNearEnabled = [""firedNearEnabled"",""SM""] call SM_fnc_getCfgValue;" \n
                         "		if (_firedNearEnabled) then" \n
                         "		{" \n
                         "			if ((_zombieAgent getVariable [""SM_ZombieOnFiredEVH"", -1]) isEqualTo -1) then" \n
                         "			{" \n
                         "				_evhID = _zombieAgent addEventHandler [""FiredNear"",{ _this call SM_fnc_zombieFiredNear }];" \n
                         "				_zombieAgent setVariable [""SM_ZombieOnFiredEVH"", _evhid];" \n
                         "			};" \n
                         "		};" \n
                         "" \n
                         "		if ((_zombieAgent getVariable [""SM_ZombieFindFiredNear"",[]]) isEqualTo []) then" \n
                         "		{" \n
                         "			_target = _zombieAgent call SM_fnc_ZombieFindTarget;			" \n
                         "			if !(isNull _target) then" \n
                         "			{" \n
                         "				if !((vehicle _target) isEqualTo (vehicle player)) then" \n
                         "				{" \n
                         "					[(netID vehicle _target), _x] remoteExecCall [""SM_fnc_transferOwnership"", 2];" \n
                         "" \n
                         "					_zombieAgent setVariable [""SM_LastTargetCheck"",nil];" \n
                         "					_zombieAgent setVariable [""SM_ZombieSoundDelayMoan"",nil];" \n
                         "					_deleted pushback _forEachIndex;" \n
                         "					_firedEVH = _zombieAgent getVariable [""SM_ZombieOnFiredEVH"",-1];" \n
                         "					if !(_firedEVH isEqualTo -1) then" \n
                         "					{" \n
                         "						_zombieAgent removeEventHandler [""FiredNear"",_firedEVH];" \n
                         "						_zombieAgent setVariable [""SM_ZombieOnFiredEVH"",nil];" \n
                         "					};" \n
                         "				}" \n
                         "				else" \n
                         "				{" \n
                         "					_isRunning = _zombieAgent getVariable [""SM_FSMRunning"", -1];" \n
                         "					if (_isRunning isEqualTo -1) then" \n
                         "					{" \n
                         "						""Creating an FSM for an zombie."" call SM_fnc_Log;" \n
                         "						_zombieHandle = [_zombieAgent,_target] execFSM ""dsr_zombz_code\fsm\zombieBrain.fsm"";" \n
                         "						_zombieAgent setVariable [""SM_FSMRunning"", _zombieHandle];" \n
                         "						_zombieAgent setVariable [""SM_LastTargetCheck"",nil];" \n
                         "						_zombieAgent setVariable [""SM_ZombieSoundDelayMoan"",nil];" \n
                         "						_zombieAgent setVariable [""SM_LastLocalCheck"",nil];" \n
                         "						_deleted pushback _forEachIndex;" \n
                         "					};" \n
                         "				};" \n
                         "			}" \n
                         "			else" \n
                         "			{" \n
                         "				_pos = _zombieAgent call SM_fnc_zombieFindPositionWander;" \n
                         "				_zombieAgent moveTo _pos;" \n
                         "			};" \n
                         "		}" \n
                         "		else" \n
                         "		{" \n
                         "			_pos = _zombieAgent call SM_fnc_zombieFindFiredNear;" \n
                         "			if !(_pos isEqualTo []) then" \n
                         "			{" \n
                         "				_zombieAgent moveTo _pos;" \n
                         "				_zombieAgent setVariable [""SM_LastTargetCheck"", diag_ticktime];" \n
                         "			};" \n
                         "		};" \n
                         "		};" \n
                         "	} forEach SM_IdleZombies;" \n
                         "" \n
                         "	if !(_deleted isEqualTo []) then" \n
                         "	{" \n
                         "		{" \n
                         "			SM_IdleZombies deleteAt (_x - _forEachIndex);" \n
                         "		} forEach _deleted;" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         """Idle zombies check finished"" call SM_fnc_Log;" \n
                         "" \n
                         "_timeout = diag_ticktime;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "end_FSM">*/
                                class end_FSM
                                {
                                        itemno = 6;
                                        priority = 0.000000;
                                        to="End";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"SM_IdleZombies isEqualTo []"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "players_check">*/
                                class players_check
                                {
                                        itemno = 9;
                                        priority = 0.000000;
                                        to="Calculate_All_Zo";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"// This only needs to be checked if there are zombies on the players client.." \n
                                         "// only issue is if the zombie is constantly targeting someone, i doubt this would cause any issues..." \n
                                         "(diag_ticktime - _nearbyPlayersCheck) >= 25"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"[] call SM_fnc_checkPlayers;" \n
                                         "_nearbyPlayersCheck = diag_ticktime;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Timeout">*/
                                class Timeout
                                {
                                        itemno = 5;
                                        priority = 0.000000;
                                        to="Calculate_All_Zo";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(diag_ticktime - _timeout) >= 1.5"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "End">*/
                class End
                {
                        name = "End";
                        itemno = 4;
                        init = /*%FSM<STATEINIT""">*/"if (hasInterface) then" \n
                         "{" \n
                         "	player setVariable [""SM_zombieIdleFSM"", nil];" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Who_Are_You_">*/
                class Who_Are_You_
                {
                        name = "Who_Are_You_";
                        itemno = 7;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Not_Client">*/
                                class Not_Client
                                {
                                        itemno = 2;
                                        priority = 0.000000;
                                        to="End";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(hasInterface)"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Client">*/
                                class Client
                                {
                                        itemno = 1;
                                        priority = 0.000000;
                                        to="Calculate_All_Zo";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"hasInterface"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
        };
        initState="Init";
        finalStates[] =
        {
                "End",
        };
};
/*%FSM</COMPILE>*/