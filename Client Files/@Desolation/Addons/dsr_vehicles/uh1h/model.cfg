class CfgSkeletons
{
	class Default
	{
		isDiscrete  =  1;
		skeletonInherit  =  "";
		skeletonBones[]  =  {};
	};
	class Vehicle : Default {};
	class Helicopter: Vehicle
	{
		skeletonInherit="Vehicle";
		skeletonBones[]=
		{
			"velka vrtule dive","",
			"mala vrtule dive","",
			"main rotor","velka vrtule dive",
			"tail rotor","mala vrtule dive",
			"otocvez","",
			"otochlaven","otocvez",
			"alt","",
			"alt2","",
			"nm_alt","",
			"nm_alt2","",
			"mph","",
			"mph2","",
			"vert_speed","",
			"vert_speed2","",
			"rpm","",
			"rpm2","",
			"horizont","",
			"horizont2","",
			"kompas","",
			"kompas2","",
			"hodinova","",
			"hodinova2","",
			"minutova","",
			"minutova2","",
			"damageHide",""
		};
	};
	class UH1HSkeleton: Helicopter
	{
		isDiscrete = 0;
		skeletonInherit = "Helicopter";
		skeletonBones[] = 
		{
			"rotordive","rotorbank",
			"rotor static dive","rotorbank",
			"rotorbank","main rotor",
			"horizont_1",""
		};
	};
};
class Rotation
{
	type  =  "rotation";
	memory  =  1;
	minValue  =  0;
	maxValue  =  1;
	angle0  =  0;
	angle1  =  1;
};
class CfgModels
{
	class Default
	{
		sectionsInherit = "";
		sections[]  =  {};
		skeletonName  =  "";
	};
	class Vehicle: Default
	{
		sections[]  = 
		{
			"cislo",
			"grupa",
			"side",
			"sektor",
			"clan",
			"clan_sign",
			"podsvit pristroju",
			"poskozeni",
			"L svetlo",
			"P svetlo",
			"zasleh"
		};
	};
	class Helicopter: Vehicle
	{

		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;	 	// Metabolism temperature of the model (in celsius)

		sectionsInherit="Vehicle";
		sections[]=
		{
			"sklo predni p",
			"sklo predni l",
			"main rotor staticka",
			"main rotor blur",
			"tail rotor staticka",
			"tail rotor blur",
			"zasleh_1",
			"motor",
			"elektronika",
			"munice",
			"zbran",
			"vez",
			"trup",
			"clan",
			"clan_sign",
			"glass1",
			"glass2",
			"glass3",
			"glass4",
			"glass5",
			"glass6",
			"podsvit pristroju"
		};
		skeletonName="Helicopter";
		class Animations
		{
			class Rotor_destructX
			{
				type="rotationX";
				source="damage";
				selection="main rotor";
				axis="velka osa";
				animPeriod=0;
				minValue=0.99;
				maxValue=1;
				angle0=0;
				angle1="rad -20";
			};
			class Rotor_destructY:Rotor_destructX
			{
				type="rotationY";
				angle1="rad +40";
			};
			class rotordive_destructX:Rotor_destructX
			{
				selection="rotordive";
				angle1="rad -5";
			};
			class rotordive_destructY:rotordive_destructX
			{
				type="rotationY";
				angle1="rad -15";
			};
			class rotordive_destructZ:rotordive_destructX
			{
				type="rotationZ";
				angle1="rad -5";
			};
			class rotor_static_dive_destructX:Rotor_destructX
			{
				selection="rotor static dive";
				angle1="rad 5";
			};
			class rotor_static_dive_destructY:rotor_static_dive_destructX
			{
				type="rotationY";
				angle1="rad -15";
			};
			class rotor_static_dive_destructZ:rotor_static_dive_destructX
			{
				type="rotationZ";
				angle1="rad -5";
			};
			class mala_vrtule_destructY:Rotor_destructX
			{
				type="rotationY";
				axis="mala osa";
				selection="tail rotor";
				angle1="rad 10";
			};
			class mala_vrtule_destructZ:mala_vrtule_destructY
			{
				type="rotationZ";
				angle1="rad 25";
			};
			// destruct BASE END
      		class damageHide
      		{
              	type="hide";
              	source="damage";
             	selection="damageHide";
     		};
            class IndicatorAltBaro: Rotation
			{
				source="altBaro";
				sourceAddress="loop";
				selection="alt";
				axis="osa_alt";
				memory=0;
				maxValue=304;
				angle1="rad -360";
			};
			class IndicatorAltBaro2: IndicatorAltBaro
			{
				selection="alt2";
				axis="osa_alt2";
			};
			class IndicatorAltRadar: Rotation
			{
				source="altRadar";
				selection="nm_alt";
				axis="osa_nm_alt";
				memory="false";
				maxValue=61;
				angle1="rad -180";
			};
			class IndicatorAltRadar2: IndicatorAltRadar
			{
				selection="nm_alt2";
				axis="osa_nm_alt2";
			};
			class IndicatorSpeed: Rotation
			{
				source="speed";
				selection="mph";
				axis="osa_mph";
				memory="false";
				maxValue=125;
				angle1="rad -320";
			};
			class IndicatorSpeed2: IndicatorSpeed
			{
				selection="mph2";
				axis="osa_mph2";
			};
			class IndicatorVertSpeed: Rotation
			{
				source="vertSpeed";
				selection="vert_speed";
				axis="osa_vert_speed";
				minValue=-30;
				maxValue=30;
				angle1="rad -300";
			};
			class IndicatorVertSpeed2: IndicatorVertSpeed
			{
				selection="vert_speed2";
				axis="osa_vert_speed2";
			};
			class IndicatorRPM: Rotation
			{
				source="rpm";
				selection="rpm";
				axis="osa_rpm";
				memory="false";
				maxValue=12;
				angle1="rad -320";
			};
			class IndicatorRPM2: IndicatorRPM
			{
				selection="rpm2";
				axis="osa_rpm2";
			};
			class IndicatorCompass: Rotation
			{
				source="direction";
				selection="kompas";
				axis="osa_kompas";
				memory="false";
				minValue=-3.141593;
				maxValue=3.141593;
				angle1="rad -360";
			};
			class IndicatorCompass2: IndicatorCompass
			{
				selection="kompas2";
				axis="osa_kompas2";
			};
			class WatchHour: Rotation
			{
				source="clockHour";
				selection="hodinova";
				axis="osa_time";
				memory="false";
				angle1="rad -360";
			};
			class WatchHour2: WatchHour
			{
				selection="hodinova2";
				axis="osa_time2";
			};
			class WatchMinute: Rotation
			{
				source="clockMinute";
				selection="minutova";
				axis="osa_time";
				memory="false";
				angle1="rad -360";
			};
			class WatchMinute2: WatchMinute
			{
				selection="minutova2";
				axis="osa_time2";
			};
			class HRotor: Rotation
			{
				source="rotorH";
				selection="main rotor";
				axis="velka osa";
				angle1="2 * 3.1415926536";
			};
			class VRotor: Rotation
			{
				source="rotorV";
				selection="tail rotor";
				axis="mala osa";
				angle1="2 * 3.1415926536";
			};
			class HorizonBank
			{
				type="rotationZ";
				source="horizonBank";
				selection="horizont";
				axis="osa_horizont";
				memory="false";
				minValue="rad -360";
				maxValue="rad +360";
				angle0="rad -360";
				angle1="rad +360";
			};
			class HorizonDive
			{
				type="rotationX";
				source="horizonDive";
				selection="horizont";
				axis="osa_horizont";
				memory=0;
				minValue=-6.283190;
				maxValue=6.283190;
				angle0=-6.283190;
				angle1=6.283190;
			};
			class Horizon2Bank: HorizonBank
			{
				selection="horizont2";
				axis="osa_horizont2";
			};
			class Horizon2Dive: HorizonDive
			{
				selection="horizont2";
				axis="osa_horizont2";
			};
		};
	};
	class UH1H: Helicopter
	{
		skeletonName = "UH1HSkeleton";
		sectionsInherit = "Helicopter";
		sections[] = 
		{
			"camo1",
			"camo2",
			"camo_mlod",
			"zasleh_1",
			"zasleh",
			"zbytek",
			"trup"
		};
		class Animations: Animations
		{
			class IndicatorAltRadar: Rotation
			{
				source = "altRadar";
				sourceAddress = "loop";
				selection = "alt";
				axis = "osa_alt";
				memory = 0;
				maxValue = 304;
				angle1 = "rad -360";
			};
			class IndicatorAltRadar2: IndicatorAltRadar
			{
				selection = "alt2";
				axis = "osa_alt2";
			};
			class IndicatorAltBaro: Rotation
			{
				source = "altBaro";
				selection = "nm_alt";
				axis = "osa_nm_alt";
				memory = "false";
				maxValue = 61;
				angle1 = "rad -180";
			};
			class IndicatorAltBaro2: IndicatorAltBaro
			{
				selection = "nm_alt2";
				axis = "osa_nm_alt2";
			};
			class IndicatorSpeed: Rotation
			{
				source = "speed";
				selection = "mph";
				axis = "osa_mph";
				memory = "false";
				maxValue = 125;
				angle1 = "rad -320";
			};
			class IndicatorSpeed2: IndicatorSpeed
			{
				selection = "mph2";
				axis = "osa_mph2";
			};
			class IndicatorVertSpeed: Rotation
			{
				source = "vertSpeed";
				selection = "vert_speed";
				axis = "osa_vert_speed";
				memory = 0;
				minValue = -30;
				maxValue = 30;
				angle1 = -5.2359881;
			};
			class IndicatorVertSpeed2: IndicatorVertSpeed
			{
				selection = "vert_speed2";
				axis = "osa_vert_speed2";
				memory = 0;
			};
			class IndicatorRPM: Rotation
			{
				source = "rpm";
				selection = "rpm";
				axis = "osa_rpm";
				memory = "false";
				maxValue = 12;
				angle1 = "rad -320";
			};
			class IndicatorRPM2: IndicatorRPM
			{
				selection = "rpm2";
				axis = "osa_rpm2";
			};
			class RotorTilt
			{
				selection = "rotordive";
				source = "rpm";
				axis = "velka osa";
				type = "translation";
				memory = 1;
				minValue = 0.0000000;
				maxValue = 12.0000000;
				offset0 = 0.00000;
				offset1 = -2.92000;
			};
			class RotorHDive
			{
				selection = "rotorbank";
				axis = "predni osa naklonu";
				type = "rotationX";
				source = "horizonDive";
				minValue = -0.5;
				maxValue = 0.5;
				angle0 = "rad -4";
				angle1 = "rad 4";
				animPeriod = 0;
			};
			class RotorHBank
			{
				selection = "rotorbank";
				axis = "predni osa naklonu";
				type = "rotationZ";
				source = "horizonBank";
				minValue = -0.5;
				maxValue = 0.5;
				angle0 = "rad 10";
				angle1 = "rad -10";
			};
			class HorizonBank
			{
				type = "rotationZ";
				source = "horizonBank";
				selection = "horizont";
				axis = "osa_horizont";
				memory = "false";
				minValue = "rad -360";
				maxValue = "rad +360";
				angle0 = "rad -360";
				angle1 = "rad +360";
			};
			class HorizonDive
			{
				type = "rotationX";
				source = "horizonDive";
				selection = "horizont";
				axis = "osa_horizont";
				memory = 1;
				minValue = "rad -360";
				maxValue = "rad +360";
				angle0 = "rad -360";
				angle1 = "rad +360";
			};
		};
	};
};

